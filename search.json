[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Beautiful R",
    "section": "",
    "text": "If you came here of your own volition, you’re probably an R programmer. Maybe you’re still a novice, maybe you’ve already had your fair share of cannot coerce type 'closure' errors; either way, you’re trying to grapple with this (at the time of writing) almost thirty years-old programming language.\nIt’s tough, I know. Take a deep breath. I’ve got you covered.\nBeautiful R is a book about what R does right: its goal is to both help you succeed at programming R, and showcase this quirky little language’s full potential. Think of it as the antithesis to The R Inferno.\nThe book is divided into three sections in increasing order of complexity:\n\nStructure explains how to create and use R projects effectively. Learn how to setup your environment, use IDEs responsibly, and never lose a file again.\nPatterns is full of tips on programming R well. Transform your projects into packages, avoid silly mistakes by creating unit tests, and learn how to write good R code.\nStyle covers the last step in the ladder: making your code clean, easy to understand, and beautiful. Once you are able to consistently write good code, it’s time to start writing great code."
  },
  {
    "objectID": "introduction.html",
    "href": "introduction.html",
    "title": "Introduction",
    "section": "",
    "text": "R is wabi-sabi."
  },
  {
    "objectID": "structure.html",
    "href": "structure.html",
    "title": "Structure",
    "section": "",
    "text": "Empty."
  },
  {
    "objectID": "environment.html",
    "href": "environment.html",
    "title": "1  Environment",
    "section": "",
    "text": "Programming necessarily presupposes a programming environment. Just as one can’t write text without choosing a font, one can’t write code outside of an environment.\nThe environment of an R script is like air is to us: you might forget that it exists, but it is always there. Then why write a whole chapter about this? Why write about air?\nBreathing foul air can make you dizzy, and working in a broken environment might cause your script to function incorrectly; this is why we need to learn how to properly manage it. There is no trick in the code above, by the way. I haven’t redefined the print() function, I just changed the width option in R’s environment."
  },
  {
    "objectID": "environment.html#file-system",
    "href": "environment.html#file-system",
    "title": "1  Environment",
    "section": "1.1 File system",
    "text": "1.1 File system\nIn Chapter 2, we’ll discuss how to organize an R project, but first we need some guidelines on how to organize files in general. Many people underestimate the usefulness organizing and naming their files consistently, but the truth is that having a system saves you valuable time when searching through your past projects.\nFirst of all, I suggest you create a folder in your computer for all your programming needs. It’s not that rare to create a lot of files when coding, and making sure they will all be in a single place really helps. Since scripts are able to write and delete files, this lowers the odds that an R program ruins your valuable personal files by accident.\nNow for the files. Danielle Navarro has an amazing presentation about project structure where she outlines three main principles to go by when naming files:\n\nBe nice to machines.\nBe nice to humans.\nMake sorting and searching easy.\n\n\n1.1.1 Be nice to machines\nMachines usually get confused by spaces, special characters (like ^.*?+|$\"), and accents. Some operating systems also treat uppercase and lowercase as the same. Our files should, therefore, always separate words with _ or - (consistently), only use lowercase letters and numbers, and never use accented characters.\n# Good\ndraft01_jalapeno_essay.docx\n\n# Bad\nDraft \"Jalapeño\" Essay(1).docx\nAn important exception here are file extensions: R scripts should be terminated by .R, always uppercase. This is a longstanding tradition, so it takes precedence over the other rules.\n\n\n1.1.2 Be nice to humans\nHumans need context, so short and vague file names are to be avoided. A good practice is to begin the file name with its “type” (e.g. analysis, note, report, etc.) and then append a meaningful description.\n# Good\nanalysis01_descriptive-statistics.R\nnotes02_tentative-write-up.docx\n\n# Bad\n01.R\nnotes2.docx\nNote how, in the examples above, - is used to separate words that belong to the same “chunk”, and _ is used to separate different “chunks”. I don’t follow this suggestion personally, but many people like the idea.\n\n\n1.1.3 Make sorting and searching easy\nIf your files names need to include dates, always follow the YYYY-MM-DD format and place them before the description so that the files are sorted automatically.\n# Good\n2012-01-01.R\n2012-01-02.R\n2012-04-01.R\n\n# Bad\n1-April-2012.R\n1-Jan-2012.R\n2-Jan-2012.R\nIf you need to order files by something other than date, use numbers as prefix, but remember to left pad with 0 so that all numbers have the same length. Also include keywords if you want to divide files by type.\n# Good\nreading01_shakespeare_romeo-and-juliet.docx\nreading02_shakespeare_romeo-and-juliet.docx\n...\nreading11_shakespeare_romeo-and-juliet.docx\nnotes01_shakespeare_romeo-and-juliet.docx\n..."
  },
  {
    "objectID": "environment.html#profile",
    "href": "environment.html#profile",
    "title": "1  Environment",
    "section": "1.2 Profile",
    "text": "1.2 Profile\nMost users don’t know about a little file called .Rprofile (the dot at the beginning makes the file invisible). Your .Rprofile contains R code that is run every time you open R, so this is a good place to set some options and configurations. It’s also an amazing place to make your analyses impossible to reproduce.\nIf you’ve never used this feature of R, I suggest you stay this way until you are a seasoned veteran in the language. A good tip for using your .Rprofile correctly is to never put anything that you would write in a script there.\nHere is a good example of an .Rprofile:\n\n# Set repo\noptions(repos = c(CRAN = \"https://cran.rstudio.org\"))\n\n# Change width (like in the beginning of the chapter)\nif (interactive()) {\n  options(width = 10)\n}\n\nIf you really want to add something to your .Rprofile, you can install the usethis package and run usethis::edit_r_profile()."
  },
  {
    "objectID": "environment.html#versions",
    "href": "environment.html#versions",
    "title": "1  Environment",
    "section": "1.3 Versions",
    "text": "1.3 Versions\nTo me, this is the most important part of the chapter. You can fix all of your file names and remove everything from your .Rprofile; if you don’t update your system, it’s all for naught.\nR is a relatively old language, so it has been updated many times since its launch. Every two to three months, the R Core Team releases a new version with many improvements and bug fixes. These updates can be very minor, but sometimes there are truly exciting new features. in R 4.1.0, for example, the native pipe (|>) was introduced, pretty much retiring magrittr.\nThis means that, if you don’t upgrade your R installation, you’ll be missing out on the evolution of the language and leaving your system vulnerable to known bugs.\nThe same is true for packages, the life and blood of R. Packages change much more and much faster than R itself, since they’re not always worried about backwards compatibility. If you leave your packages to rot, expect your scripts to stop working on other peoples’ machines, to have harder time googling bugs, and to get stuck with old code.\nMy advice is then the following:\n\nEvery few weeks make sure to run update.packages() to update your packages.\nEvery few months you should also update the language. If you’re on Windows you can use the installr package, otherwise you can go to their website and grab the newest binary.\n\nIt’s evidently a bit harder to keep your environment up to date than to just keep it unchanged forever. Sometimes you’ll have to rewrite something that stopped working from one version to the next, but this is much easier than letting your system grow more and more out of date until, all of the sudden, everything stops working all at once. If you keep up with every release, the adjustments will be small and frequent; if you don’t, the adjustments will be major and you might not be able to make them in a reasonable amount of time.\nAs a last suggestion, also make sure to update your operating system. R doesn’t support every version of Windows and Mac forever, and I’m not even mentioning the security patches you’re missing when you choose to “update later”."
  },
  {
    "objectID": "projects.html",
    "href": "projects.html",
    "title": "2  Projects",
    "section": "",
    "text": "Empty."
  },
  {
    "objectID": "ides.html",
    "href": "ides.html",
    "title": "3  IDEs",
    "section": "",
    "text": "Empty."
  },
  {
    "objectID": "git.html",
    "href": "git.html",
    "title": "4  Git",
    "section": "",
    "text": "Empty."
  },
  {
    "objectID": "patterns.html",
    "href": "patterns.html",
    "title": "Patterns",
    "section": "",
    "text": "Empty."
  },
  {
    "objectID": "packages.html",
    "href": "packages.html",
    "title": "5  Packages",
    "section": "",
    "text": "Empty."
  },
  {
    "objectID": "dependencies.html",
    "href": "dependencies.html",
    "title": "6  Dependencies",
    "section": "",
    "text": "Empty."
  },
  {
    "objectID": "data.html",
    "href": "data.html",
    "title": "7  Data",
    "section": "",
    "text": "Empty."
  },
  {
    "objectID": "testing.html",
    "href": "testing.html",
    "title": "8  Testing",
    "section": "",
    "text": "Empty."
  },
  {
    "objectID": "renv.html",
    "href": "renv.html",
    "title": "9  Renv",
    "section": "",
    "text": "Empty."
  },
  {
    "objectID": "ci-cd.html",
    "href": "ci-cd.html",
    "title": "10  CI/CD",
    "section": "",
    "text": "Empty."
  },
  {
    "objectID": "style.html",
    "href": "style.html",
    "title": "Style",
    "section": "",
    "text": "Empty."
  },
  {
    "objectID": "beauty.html",
    "href": "beauty.html",
    "title": "11  Beauty",
    "section": "",
    "text": "Empty."
  },
  {
    "objectID": "pipe.html",
    "href": "pipe.html",
    "title": "12  Pipe",
    "section": "",
    "text": "Empty."
  },
  {
    "objectID": "functions.html",
    "href": "functions.html",
    "title": "13  Functions",
    "section": "",
    "text": "Empty."
  },
  {
    "objectID": "linting.html",
    "href": "linting.html",
    "title": "14  Linting",
    "section": "",
    "text": "Empty."
  },
  {
    "objectID": "shiny.html",
    "href": "shiny.html",
    "title": "15  Shiny",
    "section": "",
    "text": "Empty."
  }
]