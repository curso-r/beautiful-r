{
  "hash": "7cbb953aed9c07e82cbf6ba428eb9f85",
  "result": {
    "markdown": "# Git {#sec-git}\n\nGit is an open source software for version control that has become one of the\nmost useful gadgets in the modern programmer's toolbox. It's also a nightmare\nfor beginners.\n\nLinus Torvalds, creator of Linux, started development on Git in early 2005 after\ngiving up on the source-control management system he previously used. Git's\nofficial [README](https://github.com/git/git/blob/master/README.md) highlights\nits duality:\n\n> [...] He described the tool as \"the stupid content tracker\" and the name as\n> (depending on your mood): [...]\n>\n> - \"global information tracker\": you're in a\n> good mood, and it actually works for you. Angels sing, and a light suddenly\n> fills the room.\n> - \"goddamn idiotic truckload of sh*t\": when it breaks\n\nBut don't be scared if you have no clue about how to use Git! The good news is\nthat there are plenty of tutorials online that teach you the basics and, most\nlikely, you won't even have to learn the advanced stuff for quite some time.\n\nThere is a whole book with almost 50 (!) chapters devoted to using Git with R:\n[_Happy Git and GitHub for the useR_](https://happygitwithr.com/) (sometimes\nabbreviated simply as _Happy Git_) by Jennifer Bryan. This chapter is but the\ntip of the Git iceberg, so keep in mind that I'm glossing over a lot of detail\nin here.\n\n## Install first, learn later\n\nI suggest you install Git before learning what to do with it. This guarantees\nthat you'll be able to try everything in this chapter out, so don't\nprocrastinate. _Happy Git_ has a full\n[chapter](https://happygitwithr.com/install-git.html) about the installation\nprocess and corner cases you might run into, but the main points are:\n\n- On Windows and Mac you can grab an installer from the official\n[website](https://git-scm.com/download/).\n- On Linux you can install it from your distro's package manager. Ubuntu users,\nfor example, can run `sudo apt install git` on the terminal.\n\nTo check whether you've installed Git correctly, verify that you have the Git\nBash program (on Windows) or run the following command on your terminal (on\nLinux/Mac):\n\n\n::: {.cell}\n\n```{.sh .cell-code}\ngit --version\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\ngit version 2.39.0\n```\n:::\n:::\n\n\nWith Git properly installed on your computer, register for a\n[GitHub](https://github.com/) account. It will all make sense later, but this is\na cloud platform that stores your Git repositories; it's a like a Google Drive\nfor code. The registration is fast and using GitHub is free (most of the time),\nso you don't have to worry about this step.\n\nNow you can introduce yourself to Git. This is how we connect our local Git\ninstallation with our remote GitHub account. Jump back into R, load the usethis\npackage, and tell Git who you are. In the command below, change `NAME` to your\nname and `EMAIL` to the email address you used when creating your GitHub\naccount:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(usethis)\nuse_git_config(user.name = \"NAME\", user.email = \"EMAIL\")\ngit_default_branch_configure()\n```\n:::\n\n\n## Personal Access Token\n\nFor your local Git installation to be able to communicate with GitHub, you'll\nneed to provide it with your \"password\". I'm using quotes here because handing\nout your actual password to a program in your computer would be very insecure.\nInstead, we'll use something called a\n[Personal Access Token](https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token)\n(PAT).\n\nA PAT is a long string of characters and numbers that GitHub generates for you\nand that can be used for authentication instead of your password. There are\nthree main advantages to this approach:\n\n1. PATs have very limited permissions by default, meaning that, if they end up\nbeing leaked, no one can take control of your account. Still, you should\n_never share your PAT_ with anyone!\n\n2. If someone does get their hands on one of your PATs, you can remotely\ndeactivate them. This is much simpler than changing your password or hunting\ndown the culprit.\n\n3. You can also set an expiration date for each and every PAT you generate,\nwhich is the best way to prevent your credentials from leaking by way of old\nsoftware and hardware you forgot to decommission.\n\nTo generate your first PAT, use `usethis::create_github_token()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncreate_github_token()\n```\n:::\n\n\nThis command will open a template on GitHub that you can use to generate a PAT.\nIf you don't want to learn about the minutiae of\n[access scopes](https://docs.github.com/en/developers/apps/building-oauth-apps/scopes-for-oauth-apps),\nyou can simply change the name of the PAT to something more descriptive (e.g.\n\"Work PC PAT\") and click **Create token**.\n\nGitHub will then generate a PAT and allow you to copy it. Make sure to\n_copy it now_! For security reasons, you'll not be able to see your PAT ever\nagain.\n\nNext, you should store your PAT in a place that Git can access. Simply install\nthe gitcreds package and run `gitcreds::gitcreds_set()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(gitcreds)\ngitcreds_set()\n```\n:::\n\n\n```\n? Enter password or token: YOUR_PAT_GOES_HERE\n-> Adding new credentials...\n-> Removing credentials from cache...\n-> Done.\n```\n\nIf you accepted usethis' template, then you'll need to re-generate this PAT once\na month. GitHub will make sure to warn you when a token is close to expiring and\neven provide you with a nice shortcut to do so, meaning you don't have to worry\nabout choosing the same access scopes every time. Once you have your new PAT,\nrun `gitcreds::gitcreds_set()` again and choose **Replace these credentials**\nwhen prompted:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngitcreds_set()\n```\n:::\n\n\n```\n-> Your current credentials for 'https://github.com':\n\n  protocol: https\n  host    : github.com\n  username: PersonalAccessToken\n  password: <-- hidden -->\n\n-> What would you like to do?\n\n1: Keep these credentials\n2: Replace these credentials\n3: See the password / token\n\nSelection: 2\n\n-> Removing current credentials...\n\n? Enter new password or token: YOUR_NEW_PAT_GOES_HERE\n-> Adding new credentials...\n-> Removing credentials from cache...\n-> Done.\n```\n\nTo make sure your setup is in tip-top shape, you can use either\n`usethis::git_sitrep()` or `gh::gh_whoami()` (just make sure to install the gh\npackage first):\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngh::gh_whoami()\n```\n:::\n\n\n```\n{\n  \"name\": \"NAME\",\n  \"login\": \"USERNAME\",\n  \"html_url\": \"https://github.com/USERNAME\",\n  \"scopes\": \"gist, repo, workflow\",\n  \"token\": \"PAT\"\n}\n```\n\n## Your first repository\n\nA repository (often simply called \"repo\") is a folder that uses Git for version\ncontrol. Now that you have installed Git, created a GitHub account, and\nintroduced yourself, you should be ready to create your first R project that is\nalso a repo.\n\nFirst, go to [https://github.com/new](https://github.com/new) and chose a name\nfor your temporary repo. Mine is going to be called `test`. Then add a simple\ndescription and check the **Add a README file** box.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](images/github_new_repo.webp)\n:::\n:::\n\n\nOnce you're happy with your repo, click **Create repository** at the bottom of\nthe page. If you did everything right, you should see a screen like in the image\nbelow.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](images/github_empty_repo.webp)\n:::\n:::\n\n\nNow let's go back to RStudio. Just like we did in [Chapter -@sec-r-projects], go\nto **File > New Project**, but this time you should select **Version Control >\nGit**. Fill the prompt with your GitHub repo's URL and select a place to create\nthe R project:\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](images/rstudio_new_repo.webp)\n:::\n:::\n\n\nFinally, click **Create Project** to finish the process. If this process didn't\nwork for you, make sure to check out _Happy Git_'s chapter on\n[troubleshooting](https://happygitwithr.com/troubleshooting.html). If it has,\nyour RStudio should now have a new **Git** pane:\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](images/rstudio_git_pane.webp)\n:::\n:::\n\n\n## Using Git and GitHub\n\nNow you should be more than ready to learn how to actually use Git and GitHub.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}