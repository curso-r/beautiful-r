{
  "hash": "1b0c689a9318e7de2194a2c7c52e471a",
  "result": {
    "markdown": "# IDEs {#sec-ides}\n\nAs discussed in [Chapter -@sec-environment], coding doesn't happen in a vacuum.\nOne important part of a programmer's workflow is their integrated development\nenvironment, also known as IDE. In short, an IDE provides tools that aid in\nsoftware development, like debuggers, compilers, interpreters, syntax\nhighlighters, and much more.\n\nThe choice of IDE is up to the developer. Some enjoy having more tools at their\ndisposal, while other prefer simplicity and portability. When talking about R,\nthere are four popular choices:\n[RStudio](https://www.rstudio.com/products/rstudio/),\n[VS Code](https://code.visualstudio.com),\n[Emacs](https://www.gnu.org/software/emacs/), and [Neovim](https://neovim.io/).\n\n::: callout-note\n## Note\n\nStrictly speaking, Emacs and Neovim are not fully fledged IDEs, instead being\nclassified as [text editors](https://en.wikipedia.org/wiki/Text_editor) (a\ndifference that will be explained later in the chapter). For the sake of\nsimplicity, I'll be lumping these two together with RStudio and VS Code.\n:::\n\nIn the coming sections I'll talk about each of them, their advantages and\ndisadvantages, as well as a few tips on how to make the most out of their\nfeatures.\n\n## RStudio\n\nRStudio is, by far, the most popular IDE for R. It was first released in 2011\nand is maintained by [RStudio, PBC](https://www.rstudio.com/) (now\n[Posit, PBC](https://posit.co/)), a company whose contribution to the R\ncommunity is hard to overestimate.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![[RStudio](https://en.wikipedia.org/wiki/RStudio#/media/File:RStudio_IDE_screenshot.png) by cdhowe / [CC BY-SA 4.0](https://creativecommons.org/licenses/by-sa/4.0/)](images/rstudio_screenshot.webp)\n:::\n:::\n\n\nUnlike the other software applications featured here, RStudio was made for R.\nFor the majority of its life, it only supported direct code execution and\nextensions associated with the language, e.g., RMarkdown and Shiny. This only\nchanged in the past few years with additional support for Python and Jupyter\nnotebooks through the [reticulate](https://rstudio.github.io/reticulate/)\npackage.\n\n### Pros and cons\n\nGiven its dedication to the R environment, RStudio is probably the easiest to\nuse. There is no setup and no extensions to install; it simply works.\n\nIt's integrated R console allows you to, out of the box, execute code directly.\nThe fact that the interface is so tightly coupled with R means that you get\nfeatures that you basically can't get anywhere else: RMarkdown integration,\nmemory monitoring, database connections, etc.\n\nRStudio is also deeply connected to its company's other products. One of this\nIDEs best features is its web version called RStudio Server; there is a free and\na paid version, but both allow you to basically access a remote server through\nRStudio's interface. This means that you can use the processing power of a\ndifferent machine and access it via the web on your local computer.\n\nAnd I haven't even scratched the surface of RStudio's integrations! There is\nalso [Team](https://www.rstudio.com/products/team/),\n[Workbench](https://www.rstudio.com/products/workbench/),\n[Connect](https://www.rstudio.com/products/connect/) and\n[Package Manager](https://www.rstudio.com/products/package-manager/), enterprise\nsolutions that can be accessed right through the IDE. Last but not least,\n[Shinyapps.io](https://www.rstudio.com/products/shinyapps/), RStudio's Shiny\nhosting solution, gets a dedicated one-click deployment feature on RStudio.\n\nHowever, despite all of these facilities, some people would argue that RStudio\nis lacking in customizability and extensibility. At the time of writing, its\ninterface is stuck as quadrants, each with multiple tabs that you can't close or\nrearrange. The way content is structured is, in general, a little clunky, with a\nlot of space devoted to tools very few people use.\n\nIf you use RStudio for as long as I have, you'll also catch on to a handful of\nminor quality of life issues. Here is a list of a few drawbacks of this IDE that\nadd some friction to one's development workflow:\n\n- The file explorer is slow and hard to use if you want to move more than one\nfile back and forth.\n\n- Sometimes printing large objects makes the console stop responding and, given\nRStudio's intimate connection with its REPL, only by quitting the full\napplication can you stop this kind of process.\n\n- [Diagnostics](https://github.com/rstudio/rstudio/issues/9692) have been\ncluttering local R sessions since 2021, which isn't necessarily a problem, but\nsome novices might think that there is something wrong with their IDE.\n\n- You still can't use multi-core processing via forking with\n[furrr](https://furrr.futureverse.org/) and friends because, at the moment, it\nis considered unstable.\n\n- Again because of its connection to the console, if R encounters a fatal error,\nthen the whole IDE crashes.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](images/rstudio_bomb_screenshot.webp)\n:::\n:::\n\n\nGetting rid of all of these problems obviously comes at a price that most people\naren't willing to pay. RStudio's ease of use is a big advantage for the majority\nof R programmers.\n\n### Tips\n\nAs explained before, RStudio is the most plug and play of all four IDEs and, if\nyou decide to use it, there is very little you can do to improve it. This\ndoesn't mean, however, that you should use it with _all_ of its factory\ndefaults. Most notably, RStudio comes out of the box with the REPL console below\nthe file editor, which is not most peoples' preference. In order to change this,\nclick the windowed button at the top of the interface and select\n**Console on Left**. You'll thank me later.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](images/rstudio_panes_screenshot.webp)\n:::\n:::\n\n\nIf you are a person with particular concerns about the reproducibility of your\nanalyses, I suggest you also change another setting in RStudio: turn off\nautomatic `.RData` saving.\n\nIf you don't know what this hidden file is, it basically stores the data you use\n(also called your workspace) during a coding session. While this seems very\nconvenient, it disincentivizes writing reproducible and resilient code. Don't\nbelieve me? Here is the description of `usethis::use_blank_slate()` a function\n(made by the very people at RStudio!) that disables `.RData`:\n\n> [...] However, long-term reproducibility is enhanced when you turn this\n> feature off and clear R's memory at every restart. Starting with a blank slate\n> provides timely feedback that encourages the development of scripts that are\n> complete and self-contained. [...]\n\nIf you don't want to use `usethis::use_blank_slate()`, you can also change this\nsetting manually in RStudio. In **Tools > Global Optionsâ€¦**, turn off\n**Restore .RData** and **Always save history**; additionally, set\n**Save workspace** to \"never\".\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](images/rstudio_settings_screenshot.webp)\n:::\n:::\n\n\n## VS Code\n\n## Emacs\n\n## Neovim\n",
    "supporting": [
      "ides_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}