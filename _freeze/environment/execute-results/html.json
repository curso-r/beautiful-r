{
  "hash": "8e7280c2cffc7211dab18346b88090a5",
  "result": {
    "markdown": "# Environment {#sec-environment}\n\nProgramming necessarily presupposes a programming _environment_. Just as one\ncan't write text without choosing a font, one can't write code outside of an\nenvironment.\n\n::: callout-note\n## Note\n\nKeep in mind that in R, \"environment\" usually has a very\n[specific meaning](https://adv-r.hadley.nz/environments.html). In this chapter\nthis word refers to the state of your computer while you're programming,\nincluding the organization of your files, the version of R that you're using,\netc.\n:::\n\nThe environment of an R script is like air is to us: you might forget that it\nexists, but it is always there. Then why write a whole chapter about this? Why\nwrite about air?\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Printing usually works like this\nprint(1:9)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 2 3 4 5 6 7 8 9\n```\n:::\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# What happened here?\nprint(1:9)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 2 3\n[4] 4 5 6\n[7] 7 8 9\n```\n:::\n:::\n\n::: {.cell}\n\n:::\n\n\nBreathing foul air can make you dizzy, and working in a broken environment might\ncause your script to function incorrectly; this is why we need to learn how to\nproperly manage it. There is no trick in the code above, by the way. I haven't\nredefined the `print()` function, I just changed the `width` option in R's\nenvironment.\n\n## File system\n\nIn [Chapter -@sec-r-projects], we'll discuss how to organize an R project, but\nfirst we need some guidelines on how to organize files in general. Many people\nunderestimate the usefulness organizing and naming their files consistently, but\nthe truth is that having a system saves you valuable time when searching through\nyour past projects.\n\nFirst of all, I suggest you create a folder in your computer for all your\nprogramming needs. It's not that rare to create _a lot_ of files when coding,\nand making sure they will all be in a single place really helps. Since scripts\nare able to write and delete files, this lowers the odds that an R program\nruins your valuable personal files by accident.\n\nNow for the files. Danielle Navarro has an amazing\n[presentation](https://slides.djnavarro.net/project-structure) about project\nstructure where she outlines three main principles to go by when naming files:\n\n1. Be nice to machines.\n1. Be nice to humans.\n1. Make sorting and searching easy.\n\n### Be nice to machines\n\nMachines usually get confused by spaces, special characters (like `^.*?+|$\"`),\nand accents. Some operating systems also treat uppercase and lowercase as the\nsame. Our files should, therefore, always separate words with `_` or `-`\n(consistently), only use lowercase letters and numbers, and never use accented\ncharacters.\n\n```txt\n# Good\ndraft01_jalapeno_essay.docx\n\n# Bad\nDraft \"JalapeÃ±o\" Essay(1).docx\n```\n\nAn important exception here are file extensions: R scripts should be terminated\nby `.R`, always uppercase. This is a longstanding tradition, so it takes\nprecedence over the other rules.\n\n### Be nice to humans\n\nHumans need context, so short and vague file names are to be avoided. A good\npractice is to begin the file name with its \"type\" (e.g. analysis, note,\nreport, etc.) and then append a meaningful description.\n\n```txt\n# Good\nanalysis01_descriptive-statistics.R\nnotes02_tentative-write-up.docx\n\n# Bad\n01.R\nnotes2.docx\n```\n\nNote how, in the examples above, `-` is used to separate words that belong to\nthe same \"chunk\", and `_` is used to separate different \"chunks\". I don't follow\nthis suggestion personally, but many people like the idea.\n\n### Make sorting and searching easy\n\nIf your files names need to include dates, always follow the `YYYY-MM-DD` format\nand place them before the description so that the files are sorted\nautomatically.\n\n```txt\n# Good\n2012-01-01.R\n2012-01-02.R\n2012-04-01.R\n\n# Bad\n1-April-2012.R\n1-Jan-2012.R\n2-Jan-2012.R\n```\n\nIf you need to order files by something other than date, use numbers as prefix,\nbut remember to left pad with `0` so that all numbers have the same length. Also\ninclude keywords if you want to divide files by type.\n\n```txt\n# Good\nreading01_shakespeare_romeo-and-juliet.docx\nreading02_shakespeare_romeo-and-juliet.docx\n...\nreading11_shakespeare_romeo-and-juliet.docx\nnotes01_shakespeare_romeo-and-juliet.docx\n...\n```\n\n## Profile\n\nMost users don't know about a little file called `.Rprofile` (the dot at the\nbeginning makes the file invisible). Your `.Rprofile` contains R code that is run\nevery time you open R, so this is a good place to set some options and\nconfigurations. It's also an amazing place to make your analyses impossible to\nreproduce.\n\nIf you've never used this feature of R, I suggest you stay this way until you\nare a seasoned veteran in the language. A good tip for using your `.Rprofile`\ncorrectly is to never put anything that you would write in a script there.\n\nHere is a good example of an `.Rprofile`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Set repo\noptions(repos = c(CRAN = \"https://cran.rstudio.org\"))\n\n# Change width (like in the beginning of the chapter)\nif (interactive()) {\n  options(width = 10)\n}\n```\n:::\n\n\nIf you _really_ want to add something to your `.Rprofile`, you can install the\n[usethis package](https://usethis.r-lib.org/) and run\n`usethis::edit_r_profile()`.\n\n## Versions\n\nTo me, this is the most important part of the chapter. You can fix all of your\nfile names and remove everything from your `.Rprofile`; if you don't update\nyour system, it's all for naught.\n\nR is a relatively old language, so it has been updated\n[many times](https://cran.r-project.org/bin/windows/base/old/) since its launch.\nEvery two to three months, the R Core Team releases a new version with many\nimprovements and bug fixes. These updates can be very minor, but sometimes there\nare truly exciting new features. in R 4.1.0, for example, the native pipe (`|>`)\nwas introduced, pretty much retiring magrittr.\n\nThis means that, if you don't upgrade your R installation, you'll be missing out\non the evolution of the language and leaving your system vulnerable to known\nbugs.\n\nThe same is true for packages, the life and blood of R. Packages change much\nmore and much faster than R itself, since they're not always worried about\nbackwards compatibility. If you leave your packages to rot, expect your scripts\nto stop working on other peoples' machines, to have harder time googling bugs,\nand to get stuck with old code.\n\nMy advice is then the following:\n\n1. Every few weeks make sure to run `update.packages()` to update your packages.\n\n1. Every few months you should also update the language. If you're on Windows\nyou can use the [installr package](https://talgalili.github.io/installr/),\notherwise you can go to their [website](https://www.r-project.org/) and grab the\nnewest binary.\n\nIt's evidently a bit harder to keep your environment up to date than to just\nkeep it unchanged forever. Sometimes you'll have to rewrite something that\nstopped working from one version to the next, but this is much easier than\nletting your system grow more and more out of date until, all of the sudden,\neverything stops working all at once. If you keep up with every release, the\nadjustments will be small and frequent; if you don't, the adjustments will be\nmajor and you might not be able to make them in a reasonable amount of time.\n\nAs a last suggestion, also make sure to update your operating system. R doesn't\nsupport every version of Windows and Mac forever, and I'm not even mentioning\nthe security patches you're missing when you choose to \"update later\".\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}