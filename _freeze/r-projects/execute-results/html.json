{
  "hash": "b6b1f9ee18801db7645514d04eab6da8",
  "result": {
    "markdown": "# R Projects {#sec-r-projects}\n\nIf you followed my advice up until now, you should have created a folder in your\ncomputer for all coding projects, your `.Rprofile` should be as clean as\npossible (or ever better: untouched), and your R installation should be\nup-to-date. Last but not least, you should also have chosen a code editor that\nsuits your needs.\n\nNow it's time to start coding! Or rather, it's time to start to _think about_\ncoding. In this chapter I'll talk about file paths (again) and how to set up\nyour first R project.\n\n:::{.callout-note}\n## Note\n\nUnfortunately, the nomenclature here isn't the best. When I talk about a\n\"project\", I'm referring to a school or work project, something that requires\nits own folder on your computer. Conversely, when I talk about an \"R project\",\nI'm referring to the R's ability to set your working directory automatically.\n:::\n\n## Paths: absolute and relative\n\nMost of us live our whole lives without ever having to worry about absolute and\nrelative paths. Unfortunately these are important concepts in programming and\nyou should at least get acquainted with them at some point. I'll do my best to\nexplain them here, but you can always read this\n[Wikipedia article](https://en.wikipedia.org/wiki/Path_(computing)) on this\nsubject for a more in-depth explanation.\n\nLet's start with an example: you and I are coworkers and I need you to find a\ndocument that I forgot on my desk. Here are my initial instructions:\n\n1. Go to the lobby of our office building.\n\n1. Take the elevator to the `Users` floor.\n\n1. Find the desk with my name on it.\n\n1. Open the second drawer, where I keep all of my documents.\n\n1. Look for the folder labeled `beautiful-r`.\n\n1. Grab the document titled `projects.qmd`.\n\nThis is a pretty decent set of instructions, but they are a bit too detailed; if\nI needed another document, I wouldn't want you to go back to the lobby again and\nstart from scratch. Besides, if we moved offices, I'd have to completely change\nthese instructions! Ditto if I left the folder on someone else's desk.\n\nBut, since you're my coworker, what if I assumed you already knew where my\n`beautiful-r` folder was? We were at the office the whole week and you saw me\nworking on `beautiful-r`, I don't need to explain to you where I left it. In\nthis case, I could give you much shorter instructions:\n\n1. Find my folder labeled `beautiful-r`.\n\n1. Grab the document titled `projects.qmd`.\n\nWay simpler, right? As you have probably guessed by now, the first type of\ninstruction represents _absolute paths_ and the second represents\n_relative paths_. An absolute path starts at what is called the _root directory_\n(i.e. the lobby) and a relative path starts at the _working directory_ (i.e. the\nfolder I was working on).\n\n## Paths in action\n\nIn order to construct an absolute path, you must start from the root directory\nof your computer. On Linux/MacOS it is simply `/`, while on Windows it is a\ndrive (usually `C:/`). This is what the absolute instructions from last section\nwould look like as a path on my MacOS computer:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Absolute path to projects.qmd\nfs::path_abs(\"projects.qmd\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n/Users/clente/Documents/beautiful-r/projects.qmd\n```\n:::\n:::\n\n\nOn the other hand, in order to determine the relative path to a file, first you\nmust set your working directory. I'll explain how to do this in the next\nsection; for now, this is what my current working directory looks like:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# My current working directory\nfs::path_wd()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n/Users/clente/Documents/beautiful-r\n```\n:::\n:::\n\n\nA relative path is simply an absolute path minus your current working directory\nand any spare slashes. This is what the relative instructions from last section\nlook like as a path:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Relative path to projects.qmd\nfs::path_rel(\"projects.qmd\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nprojects.qmd\n```\n:::\n:::\n\n\nArmed with this knowledge, take a look this small slice of the `beautiful-r`\nfolder on my computer (my current working directory). What is the relative path\nto `renv.qmd`? What about `rstudio_screenshot.webp`?\n\n```\n.\n├── images\n│   ├── rstudio_screenshot.webp\n│   └── vscode_screenshot.webp\n├── projects.qmd\n└── renv.qmd\n```\n\nIn both cases, we can ignore anything that is outside of my working directory.\nThe first requested path is simply `references.qmd`, and the second is\n`images/rstudio_screenshot.webp`\n\nAs you can see, relative paths don't depend on your computer's structure, just\nthe structure of the directory you're working on. If I reference an absolute\npath in my code and then ask you to run it, it'll never work as you probably\ndon't have a `/Users/clente/` folder on your machine. This is why we must\n_always_ use relative paths in our code.\n\n## Setting up an R project\n\nSince relative paths depend on your working directory, we need a way to set it\nautomatically every time we change the project we're working on. We're going to\ndo this using R projects.\n\n:::{.callout-important}\n## Important\n\nYou might have heard of a different way to set your working directory called\n`setwd()`. If you use this function regularly, I urge you to _stop_. There are\ntoo many ways of breaking `setwd()`, so using R projects is the way to go.\n:::\n\nAn R project is just a regular folder with an Rproj sentinel file. Thus, every\ntime you open an R project, its sentinel will set your working directory to be\nthe folder you just opened.\n\nThere are two ways to create R projects: through RStudio's built-in menu or with\nthe [usethis package](https://usethis.r-lib.org/). I like the latter method\nbetter, but the choice is up to you.\n\n### RStudio\n\nFor the first method, go to **File > New Project** and select **New Directory**:\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](images/rstudio_screenshot_new_project_1.webp)\n:::\n:::\n\n\nThen select **New Project**:\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](images/rstudio_screenshot_new_project_2.webp)\n:::\n:::\n\n\nFinally, choose your project's name and select where it's going to live:\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](images/rstudio_screenshot_new_project_3.webp)\n:::\n:::\n\n\nOnce you're done with this process, RStudio will automatically open your new\nR project. If you want to switch R projects, simply go to\n**File > Open Project...**\n\n### Other editors\n\nIf don't use RStudio or want a reproducible R project setup, then you'll need\n`usethis::create_project()`. This function takes the absolute path to a\n(non-existing) folder and creates it as an R project.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a project with usethis\nusethis::create_project(\"/Users/clente/Documents/sample\")\n```\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stderr}\n```\n✔ Creating '/Users/clente/Documents/sample/'\n✔ Setting active project to '/Users/clente/Documents/sample'\n✔ Creating 'R/'\n✔ Writing 'sample.Rproj'\n✔ Adding '.Rproj.user' to '.gitignore'\n✔ Setting active project to '<no active project>'\n```\n:::\n:::\n\n\nAbsolute paths are necessary here because you shouldn't depend on your current\nworking directory to create another R project's sentinel file. This can lead to\nnested projects, a practice that's strongly discouraged.\n\n## Using R projects\n\nWith your new R project active, let's take a look at what's inside:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Directory structure of 'sample'\nfs::dir_tree()\n```\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n.\n├── R\n└── sample.Rproj\n```\n:::\n:::\n\n\nOut of the box, R projects are really bare-bones: they only contain a sentinel\nfile and a folder for R scripts. You'll probably need at least one more folder\nto store your data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create 'data-raw' and show directory structure\nusethis::use_data_raw(\"clean\")\nfs::dir_tree()\n```\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n.\n├── R\n├── data-raw\n│   └── clean.R\n└── sample.Rproj\n```\n:::\n:::\n\n\n`data-raw` is a classic directory that will contain all data files (CSV, Excel,\netc.) and scripts to clean these data. `usethis::use_data_raw()` automatically\ncreates this directory and a sample cleaning script.\n\nSuppose I have a `mtcars.csv` file that needs a scrub. The first step is saving\nit to `data-raw` and writing the cleaning script in `clean.R`. Here is what that\nfile looks like for me:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Read data\ndf <- readr::read_csv(\"data-raw/mtcars.csv\")\n\n# Clean data\ndf_clean <- dplyr::filter(df, wt < 5)\n\n# Save cleaned data\nreadr::write_csv(df, \"data-raw/mtcars_clean.csv\")\n```\n:::\n\n::: {.cell}\n\n:::\n\n\nNote how I'm only using relative paths; this way, if I ever share my R project\nwith someone else, they won't have to deal with broken paths. After running the\nscript, this is what my R project looks like:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Directory structure after running 'clean.R'\nfs::dir_tree()\n```\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n.\n├── R\n├── data-raw\n│   ├── clean.R\n│   ├── mtcars.csv\n│   └── mtcars_clean.csv\n└── sample.Rproj\n```\n:::\n:::\n\n\nOnce the cleaning process is done, more complex analyses should be kept in the\n`R` folder. In any case, scripts will read `data-raw/mtcars_clean.csv` through\nits relative path.\n\nAnd we're off to the races! Once you start a new class or get assigned to a new\nproject at work, simply create a new R project and use it to keep all pertinent\nscripts and data. Always use relative paths, store your cleaning scripts on\n`data-raw`, and don't worry about portability ever again.\n\n\n::: {.cell}\n\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}